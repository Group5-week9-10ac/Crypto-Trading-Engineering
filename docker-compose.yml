version: '3.10'

services:
  postgres:
    image: postgres:latest
    container_name: wk9_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - mlops_pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./init_auth.sql:/docker-entrypoint-initdb.d/init_auth.sql
    networks:
      - mlops_wk9_network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - mlops_wk9_network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - mlops_wk9_network

  app:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: my_app
    depends_on:
      - kafka
    networks:
      - mlops_wk9_network
    ports:
      - "4000:4000"
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=wk9_postgres

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: my_frontend
    networks:
      - mlops_wk9_network
    ports:
      - "3000:3000"

volumes:
  mlops_pgdata:
    external: false

networks:
  mlops_wk9_network:
    driver: bridge
